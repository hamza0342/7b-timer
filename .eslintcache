[{"D:\\React\\7b-timer\\src\\index.tsx":"1","D:\\React\\7b-timer\\src\\reportWebVitals.ts":"2","D:\\React\\7b-timer\\src\\App.tsx":"3","D:\\React\\7b-timer\\src\\components\\Timer\\Timer.tsx":"4","D:\\React\\7b-timer\\src\\components\\TimerButton\\TimerButton.tsx":"5"},{"size":500,"mtime":1610619768719,"results":"6","hashOfConfig":"7"},{"size":425,"mtime":1610619768719,"results":"8","hashOfConfig":"7"},{"size":203,"mtime":1610631015276,"results":"9","hashOfConfig":"7"},{"size":1890,"mtime":1610630440941,"results":"10","hashOfConfig":"7"},{"size":482,"mtime":1610630926828,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"ayjj73",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"14"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\React\\7b-timer\\src\\index.tsx",[],["24","25"],"D:\\React\\7b-timer\\src\\reportWebVitals.ts",[],"D:\\React\\7b-timer\\src\\App.tsx",[],"D:\\React\\7b-timer\\src\\components\\Timer\\Timer.tsx",["26","27","28"],"import React, { useState, useEffect } from 'react';\r\nimport './Timer.css'\r\nimport TimerButton from '../TimerButton/TimerButton';\r\n\r\nconst Timer = () => {\r\n\r\n  let [hours, setHours] = useState<any>(0);\r\n  let [minutes, setMinutes] = useState<any>(0);\r\n  let [seconds, setSeconds] = useState<any>(0);\r\n  let [action, setAction] = useState<any>();\r\n  let [status, setStatus] = useState<any>(0);\r\n  \r\n  const run = () => {\r\n    if(status != 1){\r\n      setStatus(1);\r\n      setAction(\r\n        setInterval(()=>{\r\n          start();\r\n        }, 1000)\r\n      );\r\n    }\r\n  }\r\n\r\n  const start = ()=>{\r\n    if (seconds === 60){\r\n      minutes = minutes + 1;\r\n      setMinutes(minutes);\r\n      seconds = 0;\r\n    }\r\n\r\n    if (minutes === 60){\r\n      hours = hours +1;\r\n      setHours(hours);\r\n      minutes = 0;\r\n\r\n    }\r\n\r\n    setSeconds(seconds++);\r\n  }\r\n\r\n\r\n  const stop = ()=> {\r\n    if(status != 0){\r\n      setStatus(2)\r\n      clearInterval(action)\r\n    }\r\n  }\r\n\r\n  const reset = () => {\r\n    setStatus(0);\r\n    clearInterval(action);\r\n    setHours(0);\r\n    setMinutes(0);\r\n    setSeconds(0);\r\n  }\r\n\r\n \r\n  return (\r\n      <div className=\"timer\">\r\n             <div className=\"time-container\">\r\n                <span>\r\n                  {hours < 10 ? `0${hours}` : hours}:\r\n                </span>\r\n                <span>\r\n                  {minutes < 10 ? `0${minutes}` : minutes}:\r\n                </span>\r\n                <span>\r\n                  {seconds < 10 ? `0${seconds}` : seconds}\r\n                </span>\r\n             </div>\r\n\r\n             <div className=\"timer-button-container\">\r\n                 <TimerButton buttonAction={run} buttonValue={\"Start\"} />\r\n                 <TimerButton buttonAction={stop} buttonValue={\"Stop\"} />\r\n                 <TimerButton buttonAction={reset} buttonValue={\"Restart\"} />\r\n             </div>\r\n         </div>\r\n  );\r\n};\r\n\r\nexport default Timer;\r\n","D:\\React\\7b-timer\\src\\components\\TimerButton\\TimerButton.tsx",[],{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":1,"column":27,"nodeType":"35","messageId":"36","endLine":1,"endColumn":36},{"ruleId":"37","severity":1,"message":"38","line":14,"column":15,"nodeType":"39","messageId":"40","endLine":14,"endColumn":17},{"ruleId":"37","severity":1,"message":"38","line":43,"column":15,"nodeType":"39","messageId":"40","endLine":43,"endColumn":17},"no-native-reassign",["41"],"no-negated-in-lhs",["42"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]